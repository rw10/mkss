LabExam 2018-10-26: Patterns in Practice
---------------------------------------------------------------------

Sie sollen eine gegebene (legacy) Klasse durch die Verwendung von
Design Patterns erweitern, ohne sie jedoch zu modifizieren.
 
1) Adapter Pattern [3 Punkte]
	Implementieren Sie einen Object-Adapter, der das gegebene Interface
	"OrderService" an die gegebene Klasse "OrderProcessor" anpasst.
	Dabei sind sowohl die Parameter als auch das Error-Handling anzupassen.
	Ersetzen Sie die Checked Exceptions durch eine RuntimeException mit
	dem Namen "ServiceException". 
	
2) Decorator + Singleton Pattern [2 Punkte]
	Fügen Sie eine abstrakte Decorator Klasse "OrderServiceDecorator"
	und eine konkrete Decorator Klasse "OrderServiceLoggingDecorator"
	hinzu. 
	Der "OrderServiceLoggingDecorator" schreibt die Order ID und die
	Gesamtsumme der Bestellung in einen "Logger" der als Singleton
	implementiert ist und eine Liste von Log-Messages speichern kann.

3) Visitor Pattern [2 Punkte]
	Implementieren Sie das Visitor-Interface "OrderVisitor" durch
 	die Klasse "DiscountOrderVisitor".
 	Der "DiscountOrderVisitor" bekommt im Konstruktor den Prozent-Wert
 	übergeben, um den jeder Preis der Bestellung reduziert werden soll.

4)	Builder Pattern [2 Punkte]
	Um eine Bestellung leichter zusammen zu bauen, sollen zwei Builder 
	implementiert werden - "OrderLineBuilder" und "OrderBuilder".

5) Factory Method Pattern [1 Punkte]
	Schließlich soll noch eine Factory Methode im Interface "ServiceFactory"
 	definiert und in der Klasse "ServiceFactoryImpl" implementiert werden.
 	Das Interface definiert eine Konstante "INSTANCE" über die auf eine 
 	Instanz der Factory zugegriffen werden kann.

Kapseln Sie alle Implementierungsklassen innerhalb des Package "org.se.lab".

Testen Sie Ihre Implementierungen mit der Klasse "OrderServiceImplTest".

Tipp: Sie können selber Testfälle erstellen, um Zwischenschritte Ihrer 
Implementierung zu überprüfen.


Allgemeines
---------------------------------------------------------------------

1. Project Name
	Nennen Sie das Projekt (und das abgegebene ZIP File) so um, dass 
	statt "MyName" ihr Name verwendet wird. Beachten Sie, dass Projekten 
	die nicht der Namenskonvention entsprechen 50% der Punkte abgezogen
	werden!

2. Manuelles Review
	Bei der Notenvergabe wird für jede Lösung ein manuelles Code-Review 
	durchgeführt. Die automatischen Tests sollen den Lösungsweg aufzeigen
	und in der Umsetzung Feedback geben. Funktionale Tests können aber nicht
	sicherstellen, dass die Implementierungs- und Design-Strukturen eingehalten
	wurden. Es ist daher auch möglich, trotz laufender Tests Punkteabzüge zu
	bekommen. Die Punkteabzüge können in einer Einsichtnahme besprochen werden.
	
3. Compiler Errors
	Implementierungen die nicht kompilieren, werden nicht gewertet. 
	Ausgenommen sind Code-Teile die bereits im Projekt vorhanden sind 
	(z.B.: Tests kompilieren nicht, weil die zu testenden Klassen nicht 
	implementiert wurden). 		
	 